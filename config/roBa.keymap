#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt NUMBER_1 Q    &mt NUMBER_2 W  &mt NUMBER_3 E  &mt NUMBER_4 R         &mt N5 T                                                               &mt NUMBER_6 Y  &mt N7 U     &mt N8 I                 &mt N9 O         &mt N0 P
&mt RCTRL A       &lt 1 S         &lt 3 D         &lt 2 F                &lt 4 G             &kp LG(K_MUTE2)         &mt LEFT_GUI MINUS         &kp H           &lt 1 J      &lt 5 K                  &lt 4 L          &mt RCTRL ENTER
&mt LEFT_SHIFT Z  &mt LC(X) X     &mt LC(C) C     &lt 3 V                &mt B SPACE         &mkp MB1                &kp BACKSPACE              &mt N SPACE     &mt M MINUS  &mt RIGHT_BRACKET COMMA  &mt BSLH PERIOD  &mt RIGHT_SHIFT FSLH
&kp BACKSPACE     &kp LEFT_WIN    &kp TAB         &mt LEFT_GUI LEFT_ALT  &lt 4 LS(NUMBER_8)  &lt 5 LS(NUMBER_9)      &mt LANGUAGE_1 LANGUAGE_2  &tog 1                                                                 &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        FUNCTION {
            bindings = <
&kp EQUAL      &kp F7  &kp F8  &kp F9  &kp F11                         &mt LS(NUMBER_9) LS(NUMBER_8)  &kp N7  &kp N8  &kp N9  &kp RS(UNDER)
&kp TILDE      &kp F4  &kp F5  &kp F6  &kp F10  &trans      &kp MINUS  &kp LS(SEMI)                   &kp N4  &kp N5  &kp N6  &kp N0
&kp BACKSLASH  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &kp SLASH  &kp RS(APOSTROPHE)             &kp N1  &kp N2  &kp N3  &kp DOT
&trans         &trans  &trans  &trans  &trans   &trans      &trans     &trans                                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        NUM {
            bindings = <
&trans                      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans                             &kp LS(NUMBER_6)  &kp AMPERSAND           &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(UNDERSCORE)
&trans                      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_N0   &kp LG(Z)      &trans  &kp EXCLAMATION   &kp LS(NUMBER_2)        &kp HASH          &kp DOLLAR        &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &trans         &trans  &kp LEFT_BRACKET  &mt BSLH RIGHT_BRACKET  &kp SEMI          &kp SINGLE_QUOTE  &kp LS(FSLH)
&trans                      &trans           &trans           &trans           &trans      &trans         &trans  &trans                                                                        &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &kp ESCAPE     &kp HOME        &kp UP_ARROW    &kp END          &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DELETE
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans         &kp F2          &kp F10         &kp F7           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                            &trans               &trans           &trans       &trans     &trans
&trans  &trans  &trans  &trans  &trans              &trans        &trans          &mkp MB3             &mkp MB1         &mkp MB2     &trans     &kp LC(W)
&trans  &trans  &trans  &trans  &trans              &trans        &trans          &kp LC(N)            &kp LS(LC(TAB))  &kp LC(TAB)  &kp LC(T)  &kp LC(LS(T))
&trans  &trans  &trans  &trans  &kp LA(LEFT_ARROW)  &mkp MB1      &msc SCRL_DOWN  &kp LA(RIGHT_ARROW)                                           &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp LS(LC(MINUS)) LS(LC(SEMI))>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp LC(N0)      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans                          &trans
            >;
        };
    };
};
