#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E        &kp R           &kp T                                                           &kp Y        &kp U    &kp U                    &kp O            &kp P
&mt RCTRL A       &lt 1 S       &lt 3 D      &lt 2 F         &lt 5 G      &kp LG(C_MUTE)                 &mt LEFT_GUI MINUS  &kp H        &lt 1 J  &lt 5 K                  &lt 4 L          &mt RCTRL ENTER
&mt LEFT_SHIFT Z  &mt LC(X) X   &mt LC(C) C  &kp V           &kp B        &mt LANGUAGE_1 LANGUAGE_2      &kp BACKSPACE       &kp M        &kp N    &mt RIGHT_BRACKET COMMA  &mt BSLH PERIOD  &mt RIGHT_SHIFT FSLH
&kp BACKSPACE     &kp LEFT_WIN  &kp TAB      &lt 4 LEFT_ALT  &lt 3 SPACE  &mkp MB1                       &to 1               &lt 4 SPACE                                                     &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        FUNCTION {
            bindings = <
&kp EQUAL       &kp F7  &kp F8  &kp F9  &kp F11                         &kp FSLH            &kp N7  &kp N8  &kp N9  &kp NUMBER_0
&trans          &kp F4  &kp F5  &kp F6  &kp F10  &trans      &kp MINUS  &kp LS(SEMI)        &kp N4  &kp N5  &kp N6  &trans
&kp LEFT_SHIFT  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans     &kp RS(APOSTROPHE)  &kp N1  &kp N2  &kp N3  &kp DOT
&trans          &trans  &trans  &to 0   &trans   &trans      &to 0      &kp LS(UNDERSCORE)                          &trans
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        NUM {
            bindings = <
&trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans                             &kp LS(NUMBER_6)  &kp AMPERSAND           &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(UNDERSCORE)
&trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_N0   &kp LG(Z)      &trans  &kp EXCLAMATION   &kp LS(NUMBER_2)        &kp HASH          &kp DOLLAR        &kp PERCENT
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &trans         &trans  &kp LEFT_BRACKET  &mt BSLH RIGHT_BRACKET  &kp SEMI          &kp SINGLE_QUOTE  &kp LS(FSLH)
&trans  &trans           &trans           &trans           &trans      &trans         &trans  &trans                                                                        &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &kp ESCAPE     &kp HOME        &kp UP_ARROW    &kp END          &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DELETE
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans         &kp F2          &kp F10         &kp F7           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &kp LC(W)        &kp LA(RIGHT_ARROW)  &trans       &mt LC(LS(T)) LC(T)                      &trans    &trans           &trans       &trans  &trans
&trans  &kp LC(LS(TAB))  &kp LA(LEFT_ARROW)   &kp LC(TAB)  &kp LC(N)            &trans      &trans  &mkp MB3  &mkp MB1         &mkp MB2     &trans  &trans
&trans  &trans           &kp F5               &trans       &trans               &trans      &trans  &trans    &kp LS(LC(TAB))  &kp LC(TAB)  &trans  &trans
&trans  &trans           &trans               &trans       &trans               &trans      &trans  &trans                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LS(LC(MINUS)) LS(LC(SEMI))>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp LC(N0)      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans                          &trans
            >;
        };
    };
};
