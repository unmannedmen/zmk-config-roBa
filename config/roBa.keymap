#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt Q ESC         &kp W         &kp E        &kp R             &mt TAB T                                                         &kp Y                 &kp U    &kp I                    &kp O            &mt P MINUS
&mt RCTRL A       &lt 4 S       &lt 3 D      &lt 2 F           &lt 1 G                 &kp LG(C_MUTE)      &to 2                 &lt 1 H               &lt 2 J  &lt 3 K                  &lt 4 L          &mt RCTRL ENTER
&mt LEFT_SHIFT Z  &mt LC(X) X   &mt LC(C) C  &kp V             &kp B                   &kp LANGUAGE_2      &kp LANGUAGE_1        &kp N                 &kp M    &mt RIGHT_BRACKET COMMA  &mt BSLH PERIOD  &mt RIGHT_SHIFT FSLH
&kp BACKSPACE     &kp LEFT_WIN  &kp TAB      &mt LEFT_ALT TAB  &mt INT_MUHENKAN SPACE  &mkp MB1            &mt DELETE BACKSPACE  &mt INT_HENKAN SPACE                                                     &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        FUNCTION {
            bindings = <
&trans          &kp F7  &kp F8  &kp F9  &kp F10                                &kp LS(NUMBER_6)   &kp AMPERSAND     &kp LS(N8)     &kp LS(N9)        &kp LS(UNDERSCORE)
&trans          &kp F4  &kp F5  &kp F6  &kp F11  &trans      &kp LEFT_BRACKET  &kp EXCLAMATION    &kp LS(NUMBER_2)  &kp HASH       &kp LS(NUMBER_4)  &kp PERCENT
&kp LEFT_SHIFT  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans            &kp RIGHT_BRACKET  &kp BACKSLASH     &kp SEMICOLON  &kp SINGLE_QUOTE  &kp LS(SLASH)
&trans          &trans  &trans  &trans  &trans   &trans      &trans            &trans                                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        NUM {
            bindings = <
&trans  &kp LS(NUMBER_8)   &kp LS(SQT)         &kp LS(NUMBER_9)  &kp EQUAL                                 &trans         &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&trans  &kp LS(SEMICOLON)  &kp LS(UNDERSCORE)  &kp MINUS         &kp RIGHT_BRACKET  &kp LG(Z)      &to 0   &kp BACKSPACE  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ENTER
&trans  &kp SEMICOLON      &kp SLASH           &kp SQT           &kp BACKSLASH      &trans         &trans  &trans         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD
&trans  &trans             &trans              &to 0             &trans             &trans         &trans  &trans                                                   &trans
            >;
        };

        ARROW {
            bindings = <
&trans          &kp LC(LS(TAB))         &kp LG(UP_ARROW)    &kp LC(TAB)              &trans                          &kp ESCAPE     &kp HOME        &kp UP_ARROW    &kp END          &trans
&trans          &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)      &trans  &trans      &trans      &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DELETE
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans              &kp LG(LS(RIGHT_ARROW))  &trans  &trans      &trans      &trans         &kp F2          &kp F10         &kp F7           &trans
&trans          &trans                  &trans              &trans                   &trans  &trans      &kp DELETE  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &kp LC(W)        &kp LA(RIGHT_ARROW)  &trans       &mt LC(LS(T)) LC(T)                      &trans  &trans           &mkp MB3     &trans  &trans
&trans  &kp LC(LS(TAB))  &kp LA(LEFT_ARROW)   &kp LC(TAB)  &kp LC(N)            &trans      &trans  &trans  &mkp MB1         &mkp MB2     &trans  &trans
&trans  &trans           &kp F5               &trans       &trans               &trans      &trans  &trans  &kp LS(LC(TAB))  &kp LC(TAB)  &trans  &trans
&trans  &trans           &trans               &trans       &trans               &trans      &trans  &trans                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp LS(LC(MINUS)) LS(LC(SEMI))>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp LC(N0)      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans                          &trans
            >;
        };
    };
};
